// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'core/database/entities/device_entity.dart';
import 'core/database/entities/event_entity.dart';
import 'core/database/entities/geofence_entity.dart';
import 'core/database/entities/geofence_event_entity.dart';
import 'core/database/entities/position_entity.dart';
import 'core/database/entities/telemetry_record.dart';
import 'core/database/entities/trip_entity.dart';
import 'data/models/trip_snapshot_mobile.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 3580486239665309210),
    name: 'PositionEntity',
    lastPropertyId: const obx_int.IdUid(9, 3471416172285800264),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 2477797265281735117),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 4368633855335898086),
        name: 'deviceId',
        type: 6,
        flags: 40,
        indexId: const obx_int.IdUid(1, 2808201492593804960),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 1196285317830377965),
        name: 'latitude',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 2080466610406752301),
        name: 'longitude',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 5141311765732234119),
        name: 'speed',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 7287437044094316109),
        name: 'course',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 4070575796948143811),
        name: 'deviceTimeMs',
        type: 6,
        flags: 8,
        indexId: const obx_int.IdUid(2, 9166215683513049680),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 562907879458722528),
        name: 'serverTimeMs',
        type: 6,
        flags: 8,
        indexId: const obx_int.IdUid(3, 5961962860539236311),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 3471416172285800264),
        name: 'attributesJson',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 4746095552785336131),
    name: 'DeviceEntity',
    lastPropertyId: const obx_int.IdUid(12, 3187010347379492643),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 4851061330909611773),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 7874883271407844000),
        name: 'deviceId',
        type: 6,
        flags: 40,
        indexId: const obx_int.IdUid(4, 1194088338224820085),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 1527673692473283446),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 403872275113286543),
        name: 'uniqueId',
        type: 9,
        flags: 2048,
        indexId: const obx_int.IdUid(5, 8403228740964980523),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 92344503905043476),
        name: 'status',
        type: 9,
        flags: 2048,
        indexId: const obx_int.IdUid(6, 829231779337832996),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 4667963359953391809),
        name: 'category',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 8132319441236589204),
        name: 'model',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 7372227358109595465),
        name: 'contact',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 8561027871876401735),
        name: 'phone',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 6840723624202206321),
        name: 'lastUpdate',
        type: 6,
        flags: 8,
        indexId: const obx_int.IdUid(7, 2927376608420614933),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(11, 2689985825232400216),
        name: 'disabled',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(12, 3187010347379492643),
        name: 'attributesJson',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(3, 1766022952411284427),
    name: 'EventEntity',
    lastPropertyId: const obx_int.IdUid(14, 3423107385985013590),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 4293328404958414096),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 1739519015453176036),
        name: 'eventId',
        type: 9,
        flags: 2080,
        indexId: const obx_int.IdUid(8, 8053533354354178125),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 4616585622987562326),
        name: 'deviceId',
        type: 6,
        flags: 8,
        indexId: const obx_int.IdUid(9, 6788774021421809897),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 8761054539484453682),
        name: 'eventType',
        type: 9,
        flags: 2048,
        indexId: const obx_int.IdUid(10, 8917369485027577058),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 8260781812284403331),
        name: 'eventTimeMs',
        type: 6,
        flags: 8,
        indexId: const obx_int.IdUid(11, 7910519331595047805),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 2680924740599564635),
        name: 'positionId',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 7694948683392261667),
        name: 'geofenceId',
        type: 6,
        flags: 8,
        indexId: const obx_int.IdUid(12, 4180946556039400235),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 1690356246973187702),
        name: 'maintenanceId',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 5809667587057990851),
        name: 'priority',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 5369046918501336948),
        name: 'severity',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(11, 5300923312817909188),
        name: 'message',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(12, 692536996037118197),
        name: 'attributesJson',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(13, 4770332729034108313),
        name: 'isRead',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(14, 3423107385985013590),
        name: 'deviceName',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(4, 1919489703936589427),
    name: 'GeofenceEntity',
    lastPropertyId: const obx_int.IdUid(7, 8813531479527285981),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 935081348278957156),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 163980728153221894),
        name: 'geofenceId',
        type: 6,
        flags: 40,
        indexId: const obx_int.IdUid(13, 5235621092072228042),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 4250473868654459943),
        name: 'name',
        type: 9,
        flags: 2048,
        indexId: const obx_int.IdUid(14, 5006105215937429371),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 5982026515438236234),
        name: 'description',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 3014777621224449537),
        name: 'area',
        type: 9,
        flags: 2048,
        indexId: const obx_int.IdUid(15, 2349472746929882658),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 1043205549663435460),
        name: 'calendarId',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 8813531479527285981),
        name: 'attributesJson',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(5, 7368267337847358361),
    name: 'TripEntity',
    lastPropertyId: const obx_int.IdUid(16, 67794839549307910),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 8311135312760188962),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 2726391856074650225),
        name: 'tripId',
        type: 9,
        flags: 2080,
        indexId: const obx_int.IdUid(16, 4901253822743627874),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 2308682951914581953),
        name: 'deviceId',
        type: 6,
        flags: 8,
        indexId: const obx_int.IdUid(17, 9040573290865994386),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 358884129300861673),
        name: 'startTimeMs',
        type: 6,
        flags: 8,
        indexId: const obx_int.IdUid(18, 5701522439519372562),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 1433554490480616591),
        name: 'endTimeMs',
        type: 6,
        flags: 8,
        indexId: const obx_int.IdUid(19, 8642255856666822365),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 8129469584098395652),
        name: 'distanceKm',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 2256157532529661509),
        name: 'driverName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 2218933981787791096),
        name: 'driverUniqueId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 147716749986475198),
        name: 'maxSpeed',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 5137128105121801520),
        name: 'averageSpeed',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(11, 8117092640137495956),
        name: 'startOdometer',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(12, 5481167895151198405),
        name: 'endOdometer',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(13, 860453836545096794),
        name: 'startPositionId',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(14, 110639296476795273),
        name: 'endPositionId',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(15, 1043508337225427508),
        name: 'spentFuel',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(16, 67794839549307910),
        name: 'attributesJson',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(6, 4884911390848185971),
    name: 'TelemetryRecord',
    lastPropertyId: const obx_int.IdUid(9, 4055737664901968062),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 4276626307023430888),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 1944236348208386085),
        name: 'deviceId',
        type: 6,
        flags: 8,
        indexId: const obx_int.IdUid(20, 1193383617258029940),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 6133613763831947324),
        name: 'timestampMs',
        type: 6,
        flags: 8,
        indexId: const obx_int.IdUid(21, 3816651612327145533),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 6394000758318156867),
        name: 'speed',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 4368013641233144920),
        name: 'battery',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 4250605828746500783),
        name: 'signal',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 5622026549713914196),
        name: 'engine',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 6965802003024492481),
        name: 'odometer',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 4055737664901968062),
        name: 'motion',
        type: 1,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(7, 3941204868590047628),
    name: 'TripSnapshot',
    lastPropertyId: const obx_int.IdUid(7, 9004363000642401183),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 1829170185030557693),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 6951295689129631092),
        name: 'monthKey',
        type: 9,
        flags: 2080,
        indexId: const obx_int.IdUid(22, 1600730073326815966),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 1218855408975824276),
        name: 'tripCount',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 7943486417956296819),
        name: 'totalDistanceKm',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 6189554645443565491),
        name: 'totalDurationHrs',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 303542046918328434),
        name: 'avgSpeedKph',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 9004363000642401183),
        name: 'createdAt',
        type: 10,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(8, 2812116548088571599),
    name: 'GeofenceEventEntity',
    lastPropertyId: const obx_int.IdUid(14, 977598808898050017),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 5599896190694552469),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 4544566412133152019),
        name: 'eventId',
        type: 9,
        flags: 2080,
        indexId: const obx_int.IdUid(23, 3522846638005654641),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 4711695511786423042),
        name: 'geofenceId',
        type: 9,
        flags: 2048,
        indexId: const obx_int.IdUid(24, 1190289486820908649),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 5223236274107866436),
        name: 'geofenceName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 1534819153410869465),
        name: 'deviceId',
        type: 9,
        flags: 2048,
        indexId: const obx_int.IdUid(25, 9072304262820360254),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 8048649176167872176),
        name: 'deviceName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 446349630743250001),
        name: 'eventType',
        type: 9,
        flags: 2048,
        indexId: const obx_int.IdUid(26, 8226846714138550195),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 4824446704761616405),
        name: 'eventTimeMs',
        type: 6,
        flags: 8,
        indexId: const obx_int.IdUid(27, 7918326653101692442),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 4995367106724555691),
        name: 'latitude',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 6358916211217176216),
        name: 'longitude',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(11, 1115133075660118746),
        name: 'dwellDurationMs',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(12, 914238883197184394),
        name: 'status',
        type: 9,
        flags: 2048,
        indexId: const obx_int.IdUid(28, 638326360943675639),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(13, 2370860904449539118),
        name: 'syncStatus',
        type: 9,
        flags: 2048,
        indexId: const obx_int.IdUid(29, 3034522310017026784),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(14, 977598808898050017),
        name: 'attributesJson',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(8, 2812116548088571599),
    lastIndexId: const obx_int.IdUid(29, 3034522310017026784),
    lastRelationId: const obx_int.IdUid(0, 0),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [],
    retiredIndexUids: const [],
    retiredPropertyUids: const [],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    PositionEntity: obx_int.EntityDefinition<PositionEntity>(
      model: _entities[0],
      toOneRelations: (PositionEntity object) => [],
      toManyRelations: (PositionEntity object) => {},
      getId: (PositionEntity object) => object.id,
      setId: (PositionEntity object, int id) {
        object.id = id;
      },
      objectToFB: (PositionEntity object, fb.Builder fbb) {
        final attributesJsonOffset = fbb.writeString(object.attributesJson);
        fbb.startTable(10);
        fbb.addInt64(0, object.id);
        fbb.addInt64(1, object.deviceId);
        fbb.addFloat64(2, object.latitude);
        fbb.addFloat64(3, object.longitude);
        fbb.addFloat64(4, object.speed);
        fbb.addFloat64(5, object.course);
        fbb.addInt64(6, object.deviceTimeMs);
        fbb.addInt64(7, object.serverTimeMs);
        fbb.addOffset(8, attributesJsonOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final deviceIdParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          6,
          0,
        );
        final latitudeParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          8,
          0,
        );
        final longitudeParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          10,
          0,
        );
        final speedParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          12,
          0,
        );
        final courseParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          14,
          0,
        );
        final deviceTimeMsParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          16,
          0,
        );
        final serverTimeMsParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          18,
          0,
        );
        final attributesJsonParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 20, '');
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final object = PositionEntity(
          deviceId: deviceIdParam,
          latitude: latitudeParam,
          longitude: longitudeParam,
          speed: speedParam,
          course: courseParam,
          deviceTimeMs: deviceTimeMsParam,
          serverTimeMs: serverTimeMsParam,
          attributesJson: attributesJsonParam,
          id: idParam,
        );

        return object;
      },
    ),
    DeviceEntity: obx_int.EntityDefinition<DeviceEntity>(
      model: _entities[1],
      toOneRelations: (DeviceEntity object) => [],
      toManyRelations: (DeviceEntity object) => {},
      getId: (DeviceEntity object) => object.id,
      setId: (DeviceEntity object, int id) {
        object.id = id;
      },
      objectToFB: (DeviceEntity object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        final uniqueIdOffset = fbb.writeString(object.uniqueId);
        final statusOffset = fbb.writeString(object.status);
        final categoryOffset = object.category == null
            ? null
            : fbb.writeString(object.category!);
        final modelOffset = object.model == null
            ? null
            : fbb.writeString(object.model!);
        final contactOffset = object.contact == null
            ? null
            : fbb.writeString(object.contact!);
        final phoneOffset = object.phone == null
            ? null
            : fbb.writeString(object.phone!);
        final attributesJsonOffset = fbb.writeString(object.attributesJson);
        fbb.startTable(13);
        fbb.addInt64(0, object.id);
        fbb.addInt64(1, object.deviceId);
        fbb.addOffset(2, nameOffset);
        fbb.addOffset(3, uniqueIdOffset);
        fbb.addOffset(4, statusOffset);
        fbb.addOffset(5, categoryOffset);
        fbb.addOffset(6, modelOffset);
        fbb.addOffset(7, contactOffset);
        fbb.addOffset(8, phoneOffset);
        fbb.addInt64(9, object.lastUpdate);
        fbb.addBool(10, object.disabled);
        fbb.addOffset(11, attributesJsonOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final deviceIdParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          6,
          0,
        );
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final uniqueIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final statusParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 12, '');
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final categoryParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 14);
        final modelParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 16);
        final contactParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 18);
        final phoneParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 20);
        final lastUpdateParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          22,
        );
        final disabledParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          24,
          false,
        );
        final attributesJsonParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 26, '');
        final object = DeviceEntity(
          deviceId: deviceIdParam,
          name: nameParam,
          uniqueId: uniqueIdParam,
          status: statusParam,
          id: idParam,
          category: categoryParam,
          model: modelParam,
          contact: contactParam,
          phone: phoneParam,
          lastUpdate: lastUpdateParam,
          disabled: disabledParam,
          attributesJson: attributesJsonParam,
        );

        return object;
      },
    ),
    EventEntity: obx_int.EntityDefinition<EventEntity>(
      model: _entities[2],
      toOneRelations: (EventEntity object) => [],
      toManyRelations: (EventEntity object) => {},
      getId: (EventEntity object) => object.id,
      setId: (EventEntity object, int id) {
        object.id = id;
      },
      objectToFB: (EventEntity object, fb.Builder fbb) {
        final eventIdOffset = fbb.writeString(object.eventId);
        final eventTypeOffset = fbb.writeString(object.eventType);
        final priorityOffset = object.priority == null
            ? null
            : fbb.writeString(object.priority!);
        final severityOffset = object.severity == null
            ? null
            : fbb.writeString(object.severity!);
        final messageOffset = object.message == null
            ? null
            : fbb.writeString(object.message!);
        final attributesJsonOffset = fbb.writeString(object.attributesJson);
        final deviceNameOffset = object.deviceName == null
            ? null
            : fbb.writeString(object.deviceName!);
        fbb.startTable(15);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, eventIdOffset);
        fbb.addInt64(2, object.deviceId);
        fbb.addOffset(3, eventTypeOffset);
        fbb.addInt64(4, object.eventTimeMs);
        fbb.addInt64(5, object.positionId);
        fbb.addInt64(6, object.geofenceId);
        fbb.addInt64(7, object.maintenanceId);
        fbb.addOffset(8, priorityOffset);
        fbb.addOffset(9, severityOffset);
        fbb.addOffset(10, messageOffset);
        fbb.addOffset(11, attributesJsonOffset);
        fbb.addBool(12, object.isRead);
        fbb.addOffset(13, deviceNameOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final eventIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final deviceIdParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          8,
          0,
        );
        final eventTypeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final eventTimeMsParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          12,
          0,
        );
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final deviceNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 30);
        final positionIdParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          14,
        );
        final geofenceIdParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          16,
        );
        final maintenanceIdParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          18,
        );
        final priorityParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 20);
        final severityParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 22);
        final messageParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 24);
        final attributesJsonParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 26, '');
        final isReadParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          28,
          false,
        );
        final object = EventEntity(
          eventId: eventIdParam,
          deviceId: deviceIdParam,
          eventType: eventTypeParam,
          eventTimeMs: eventTimeMsParam,
          id: idParam,
          deviceName: deviceNameParam,
          positionId: positionIdParam,
          geofenceId: geofenceIdParam,
          maintenanceId: maintenanceIdParam,
          priority: priorityParam,
          severity: severityParam,
          message: messageParam,
          attributesJson: attributesJsonParam,
          isRead: isReadParam,
        );

        return object;
      },
    ),
    GeofenceEntity: obx_int.EntityDefinition<GeofenceEntity>(
      model: _entities[3],
      toOneRelations: (GeofenceEntity object) => [],
      toManyRelations: (GeofenceEntity object) => {},
      getId: (GeofenceEntity object) => object.id,
      setId: (GeofenceEntity object, int id) {
        object.id = id;
      },
      objectToFB: (GeofenceEntity object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        final descriptionOffset = object.description == null
            ? null
            : fbb.writeString(object.description!);
        final areaOffset = object.area == null
            ? null
            : fbb.writeString(object.area!);
        final attributesJsonOffset = fbb.writeString(object.attributesJson);
        fbb.startTable(8);
        fbb.addInt64(0, object.id);
        fbb.addInt64(1, object.geofenceId);
        fbb.addOffset(2, nameOffset);
        fbb.addOffset(3, descriptionOffset);
        fbb.addOffset(4, areaOffset);
        fbb.addInt64(5, object.calendarId);
        fbb.addOffset(6, attributesJsonOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final geofenceIdParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          6,
          0,
        );
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final descriptionParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 10);
        final areaParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 12);
        final calendarIdParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          14,
        );
        final attributesJsonParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 16, '');
        final object = GeofenceEntity(
          geofenceId: geofenceIdParam,
          name: nameParam,
          id: idParam,
          description: descriptionParam,
          area: areaParam,
          calendarId: calendarIdParam,
          attributesJson: attributesJsonParam,
        );

        return object;
      },
    ),
    TripEntity: obx_int.EntityDefinition<TripEntity>(
      model: _entities[4],
      toOneRelations: (TripEntity object) => [],
      toManyRelations: (TripEntity object) => {},
      getId: (TripEntity object) => object.id,
      setId: (TripEntity object, int id) {
        object.id = id;
      },
      objectToFB: (TripEntity object, fb.Builder fbb) {
        final tripIdOffset = fbb.writeString(object.tripId);
        final driverNameOffset = object.driverName == null
            ? null
            : fbb.writeString(object.driverName!);
        final driverUniqueIdOffset = object.driverUniqueId == null
            ? null
            : fbb.writeString(object.driverUniqueId!);
        final attributesJsonOffset = fbb.writeString(object.attributesJson);
        fbb.startTable(17);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, tripIdOffset);
        fbb.addInt64(2, object.deviceId);
        fbb.addInt64(3, object.startTimeMs);
        fbb.addInt64(4, object.endTimeMs);
        fbb.addFloat64(5, object.distanceKm);
        fbb.addOffset(6, driverNameOffset);
        fbb.addOffset(7, driverUniqueIdOffset);
        fbb.addFloat64(8, object.maxSpeed);
        fbb.addFloat64(9, object.averageSpeed);
        fbb.addFloat64(10, object.startOdometer);
        fbb.addFloat64(11, object.endOdometer);
        fbb.addInt64(12, object.startPositionId);
        fbb.addInt64(13, object.endPositionId);
        fbb.addFloat64(14, object.spentFuel);
        fbb.addOffset(15, attributesJsonOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final tripIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final deviceIdParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          8,
          0,
        );
        final startTimeMsParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          10,
          0,
        );
        final endTimeMsParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          12,
          0,
        );
        final distanceKmParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          14,
          0,
        );
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final driverNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 16);
        final driverUniqueIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 18);
        final maxSpeedParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          20,
          0,
        );
        final averageSpeedParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          22,
          0,
        );
        final startOdometerParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          24,
          0,
        );
        final endOdometerParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          26,
          0,
        );
        final startPositionIdParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          28,
        );
        final endPositionIdParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          30,
        );
        final spentFuelParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          32,
          0,
        );
        final attributesJsonParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 34, '');
        final object = TripEntity(
          tripId: tripIdParam,
          deviceId: deviceIdParam,
          startTimeMs: startTimeMsParam,
          endTimeMs: endTimeMsParam,
          distanceKm: distanceKmParam,
          id: idParam,
          driverName: driverNameParam,
          driverUniqueId: driverUniqueIdParam,
          maxSpeed: maxSpeedParam,
          averageSpeed: averageSpeedParam,
          startOdometer: startOdometerParam,
          endOdometer: endOdometerParam,
          startPositionId: startPositionIdParam,
          endPositionId: endPositionIdParam,
          spentFuel: spentFuelParam,
          attributesJson: attributesJsonParam,
        );

        return object;
      },
    ),
    TelemetryRecord: obx_int.EntityDefinition<TelemetryRecord>(
      model: _entities[5],
      toOneRelations: (TelemetryRecord object) => [],
      toManyRelations: (TelemetryRecord object) => {},
      getId: (TelemetryRecord object) => object.id,
      setId: (TelemetryRecord object, int id) {
        object.id = id;
      },
      objectToFB: (TelemetryRecord object, fb.Builder fbb) {
        final engineOffset = object.engine == null
            ? null
            : fbb.writeString(object.engine!);
        fbb.startTable(10);
        fbb.addInt64(0, object.id);
        fbb.addInt64(1, object.deviceId);
        fbb.addInt64(2, object.timestampMs);
        fbb.addFloat64(3, object.speed);
        fbb.addFloat64(4, object.battery);
        fbb.addFloat64(5, object.signal);
        fbb.addOffset(6, engineOffset);
        fbb.addFloat64(7, object.odometer);
        fbb.addBool(8, object.motion);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final deviceIdParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          6,
          0,
        );
        final timestampMsParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          8,
          0,
        );
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final speedParam = const fb.Float64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          10,
        );
        final batteryParam = const fb.Float64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          12,
        );
        final signalParam = const fb.Float64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          14,
        );
        final engineParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 16);
        final odometerParam = const fb.Float64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          18,
        );
        final motionParam = const fb.BoolReader().vTableGetNullable(
          buffer,
          rootOffset,
          20,
        );
        final object = TelemetryRecord(
          deviceId: deviceIdParam,
          timestampMs: timestampMsParam,
          id: idParam,
          speed: speedParam,
          battery: batteryParam,
          signal: signalParam,
          engine: engineParam,
          odometer: odometerParam,
          motion: motionParam,
        );

        return object;
      },
    ),
    TripSnapshot: obx_int.EntityDefinition<TripSnapshot>(
      model: _entities[6],
      toOneRelations: (TripSnapshot object) => [],
      toManyRelations: (TripSnapshot object) => {},
      getId: (TripSnapshot object) => object.id,
      setId: (TripSnapshot object, int id) {
        object.id = id;
      },
      objectToFB: (TripSnapshot object, fb.Builder fbb) {
        final monthKeyOffset = fbb.writeString(object.monthKey);
        fbb.startTable(8);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, monthKeyOffset);
        fbb.addInt64(2, object.tripCount);
        fbb.addFloat64(3, object.totalDistanceKm);
        fbb.addFloat64(4, object.totalDurationHrs);
        fbb.addFloat64(5, object.avgSpeedKph);
        fbb.addInt64(6, object.createdAt.millisecondsSinceEpoch);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final monthKeyParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final tripCountParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          8,
          0,
        );
        final totalDistanceKmParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          10,
          0,
        );
        final totalDurationHrsParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          12,
          0,
        );
        final avgSpeedKphParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          14,
          0,
        );
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0),
        );
        final object = TripSnapshot(
          monthKey: monthKeyParam,
          tripCount: tripCountParam,
          totalDistanceKm: totalDistanceKmParam,
          totalDurationHrs: totalDurationHrsParam,
          avgSpeedKph: avgSpeedKphParam,
          id: idParam,
          createdAt: createdAtParam,
        );

        return object;
      },
    ),
    GeofenceEventEntity: obx_int.EntityDefinition<GeofenceEventEntity>(
      model: _entities[7],
      toOneRelations: (GeofenceEventEntity object) => [],
      toManyRelations: (GeofenceEventEntity object) => {},
      getId: (GeofenceEventEntity object) => object.id,
      setId: (GeofenceEventEntity object, int id) {
        object.id = id;
      },
      objectToFB: (GeofenceEventEntity object, fb.Builder fbb) {
        final eventIdOffset = fbb.writeString(object.eventId);
        final geofenceIdOffset = fbb.writeString(object.geofenceId);
        final geofenceNameOffset = fbb.writeString(object.geofenceName);
        final deviceIdOffset = fbb.writeString(object.deviceId);
        final deviceNameOffset = fbb.writeString(object.deviceName);
        final eventTypeOffset = fbb.writeString(object.eventType);
        final statusOffset = fbb.writeString(object.status);
        final syncStatusOffset = fbb.writeString(object.syncStatus);
        final attributesJsonOffset = fbb.writeString(object.attributesJson);
        fbb.startTable(15);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, eventIdOffset);
        fbb.addOffset(2, geofenceIdOffset);
        fbb.addOffset(3, geofenceNameOffset);
        fbb.addOffset(4, deviceIdOffset);
        fbb.addOffset(5, deviceNameOffset);
        fbb.addOffset(6, eventTypeOffset);
        fbb.addInt64(7, object.eventTimeMs);
        fbb.addFloat64(8, object.latitude);
        fbb.addFloat64(9, object.longitude);
        fbb.addInt64(10, object.dwellDurationMs);
        fbb.addOffset(11, statusOffset);
        fbb.addOffset(12, syncStatusOffset);
        fbb.addOffset(13, attributesJsonOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final eventIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final geofenceIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final geofenceNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final deviceIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 12, '');
        final deviceNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 14, '');
        final eventTypeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 16, '');
        final eventTimeMsParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          18,
          0,
        );
        final latitudeParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          20,
          0,
        );
        final longitudeParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          22,
          0,
        );
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final statusParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 26, '');
        final syncStatusParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 28, '');
        final dwellDurationMsParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          24,
        );
        final attributesJsonParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 30, '');
        final object = GeofenceEventEntity(
          eventId: eventIdParam,
          geofenceId: geofenceIdParam,
          geofenceName: geofenceNameParam,
          deviceId: deviceIdParam,
          deviceName: deviceNameParam,
          eventType: eventTypeParam,
          eventTimeMs: eventTimeMsParam,
          latitude: latitudeParam,
          longitude: longitudeParam,
          id: idParam,
          status: statusParam,
          syncStatus: syncStatusParam,
          dwellDurationMs: dwellDurationMsParam,
          attributesJson: attributesJsonParam,
        );

        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [PositionEntity] entity fields to define ObjectBox queries.
class PositionEntity_ {
  /// See [PositionEntity.id].
  static final id = obx.QueryIntegerProperty<PositionEntity>(
    _entities[0].properties[0],
  );

  /// See [PositionEntity.deviceId].
  static final deviceId = obx.QueryIntegerProperty<PositionEntity>(
    _entities[0].properties[1],
  );

  /// See [PositionEntity.latitude].
  static final latitude = obx.QueryDoubleProperty<PositionEntity>(
    _entities[0].properties[2],
  );

  /// See [PositionEntity.longitude].
  static final longitude = obx.QueryDoubleProperty<PositionEntity>(
    _entities[0].properties[3],
  );

  /// See [PositionEntity.speed].
  static final speed = obx.QueryDoubleProperty<PositionEntity>(
    _entities[0].properties[4],
  );

  /// See [PositionEntity.course].
  static final course = obx.QueryDoubleProperty<PositionEntity>(
    _entities[0].properties[5],
  );

  /// See [PositionEntity.deviceTimeMs].
  static final deviceTimeMs = obx.QueryIntegerProperty<PositionEntity>(
    _entities[0].properties[6],
  );

  /// See [PositionEntity.serverTimeMs].
  static final serverTimeMs = obx.QueryIntegerProperty<PositionEntity>(
    _entities[0].properties[7],
  );

  /// See [PositionEntity.attributesJson].
  static final attributesJson = obx.QueryStringProperty<PositionEntity>(
    _entities[0].properties[8],
  );
}

/// [DeviceEntity] entity fields to define ObjectBox queries.
class DeviceEntity_ {
  /// See [DeviceEntity.id].
  static final id = obx.QueryIntegerProperty<DeviceEntity>(
    _entities[1].properties[0],
  );

  /// See [DeviceEntity.deviceId].
  static final deviceId = obx.QueryIntegerProperty<DeviceEntity>(
    _entities[1].properties[1],
  );

  /// See [DeviceEntity.name].
  static final name = obx.QueryStringProperty<DeviceEntity>(
    _entities[1].properties[2],
  );

  /// See [DeviceEntity.uniqueId].
  static final uniqueId = obx.QueryStringProperty<DeviceEntity>(
    _entities[1].properties[3],
  );

  /// See [DeviceEntity.status].
  static final status = obx.QueryStringProperty<DeviceEntity>(
    _entities[1].properties[4],
  );

  /// See [DeviceEntity.category].
  static final category = obx.QueryStringProperty<DeviceEntity>(
    _entities[1].properties[5],
  );

  /// See [DeviceEntity.model].
  static final model = obx.QueryStringProperty<DeviceEntity>(
    _entities[1].properties[6],
  );

  /// See [DeviceEntity.contact].
  static final contact = obx.QueryStringProperty<DeviceEntity>(
    _entities[1].properties[7],
  );

  /// See [DeviceEntity.phone].
  static final phone = obx.QueryStringProperty<DeviceEntity>(
    _entities[1].properties[8],
  );

  /// See [DeviceEntity.lastUpdate].
  static final lastUpdate = obx.QueryIntegerProperty<DeviceEntity>(
    _entities[1].properties[9],
  );

  /// See [DeviceEntity.disabled].
  static final disabled = obx.QueryBooleanProperty<DeviceEntity>(
    _entities[1].properties[10],
  );

  /// See [DeviceEntity.attributesJson].
  static final attributesJson = obx.QueryStringProperty<DeviceEntity>(
    _entities[1].properties[11],
  );
}

/// [EventEntity] entity fields to define ObjectBox queries.
class EventEntity_ {
  /// See [EventEntity.id].
  static final id = obx.QueryIntegerProperty<EventEntity>(
    _entities[2].properties[0],
  );

  /// See [EventEntity.eventId].
  static final eventId = obx.QueryStringProperty<EventEntity>(
    _entities[2].properties[1],
  );

  /// See [EventEntity.deviceId].
  static final deviceId = obx.QueryIntegerProperty<EventEntity>(
    _entities[2].properties[2],
  );

  /// See [EventEntity.eventType].
  static final eventType = obx.QueryStringProperty<EventEntity>(
    _entities[2].properties[3],
  );

  /// See [EventEntity.eventTimeMs].
  static final eventTimeMs = obx.QueryIntegerProperty<EventEntity>(
    _entities[2].properties[4],
  );

  /// See [EventEntity.positionId].
  static final positionId = obx.QueryIntegerProperty<EventEntity>(
    _entities[2].properties[5],
  );

  /// See [EventEntity.geofenceId].
  static final geofenceId = obx.QueryIntegerProperty<EventEntity>(
    _entities[2].properties[6],
  );

  /// See [EventEntity.maintenanceId].
  static final maintenanceId = obx.QueryIntegerProperty<EventEntity>(
    _entities[2].properties[7],
  );

  /// See [EventEntity.priority].
  static final priority = obx.QueryStringProperty<EventEntity>(
    _entities[2].properties[8],
  );

  /// See [EventEntity.severity].
  static final severity = obx.QueryStringProperty<EventEntity>(
    _entities[2].properties[9],
  );

  /// See [EventEntity.message].
  static final message = obx.QueryStringProperty<EventEntity>(
    _entities[2].properties[10],
  );

  /// See [EventEntity.attributesJson].
  static final attributesJson = obx.QueryStringProperty<EventEntity>(
    _entities[2].properties[11],
  );

  /// See [EventEntity.isRead].
  static final isRead = obx.QueryBooleanProperty<EventEntity>(
    _entities[2].properties[12],
  );

  /// See [EventEntity.deviceName].
  static final deviceName = obx.QueryStringProperty<EventEntity>(
    _entities[2].properties[13],
  );
}

/// [GeofenceEntity] entity fields to define ObjectBox queries.
class GeofenceEntity_ {
  /// See [GeofenceEntity.id].
  static final id = obx.QueryIntegerProperty<GeofenceEntity>(
    _entities[3].properties[0],
  );

  /// See [GeofenceEntity.geofenceId].
  static final geofenceId = obx.QueryIntegerProperty<GeofenceEntity>(
    _entities[3].properties[1],
  );

  /// See [GeofenceEntity.name].
  static final name = obx.QueryStringProperty<GeofenceEntity>(
    _entities[3].properties[2],
  );

  /// See [GeofenceEntity.description].
  static final description = obx.QueryStringProperty<GeofenceEntity>(
    _entities[3].properties[3],
  );

  /// See [GeofenceEntity.area].
  static final area = obx.QueryStringProperty<GeofenceEntity>(
    _entities[3].properties[4],
  );

  /// See [GeofenceEntity.calendarId].
  static final calendarId = obx.QueryIntegerProperty<GeofenceEntity>(
    _entities[3].properties[5],
  );

  /// See [GeofenceEntity.attributesJson].
  static final attributesJson = obx.QueryStringProperty<GeofenceEntity>(
    _entities[3].properties[6],
  );
}

/// [TripEntity] entity fields to define ObjectBox queries.
class TripEntity_ {
  /// See [TripEntity.id].
  static final id = obx.QueryIntegerProperty<TripEntity>(
    _entities[4].properties[0],
  );

  /// See [TripEntity.tripId].
  static final tripId = obx.QueryStringProperty<TripEntity>(
    _entities[4].properties[1],
  );

  /// See [TripEntity.deviceId].
  static final deviceId = obx.QueryIntegerProperty<TripEntity>(
    _entities[4].properties[2],
  );

  /// See [TripEntity.startTimeMs].
  static final startTimeMs = obx.QueryIntegerProperty<TripEntity>(
    _entities[4].properties[3],
  );

  /// See [TripEntity.endTimeMs].
  static final endTimeMs = obx.QueryIntegerProperty<TripEntity>(
    _entities[4].properties[4],
  );

  /// See [TripEntity.distanceKm].
  static final distanceKm = obx.QueryDoubleProperty<TripEntity>(
    _entities[4].properties[5],
  );

  /// See [TripEntity.driverName].
  static final driverName = obx.QueryStringProperty<TripEntity>(
    _entities[4].properties[6],
  );

  /// See [TripEntity.driverUniqueId].
  static final driverUniqueId = obx.QueryStringProperty<TripEntity>(
    _entities[4].properties[7],
  );

  /// See [TripEntity.maxSpeed].
  static final maxSpeed = obx.QueryDoubleProperty<TripEntity>(
    _entities[4].properties[8],
  );

  /// See [TripEntity.averageSpeed].
  static final averageSpeed = obx.QueryDoubleProperty<TripEntity>(
    _entities[4].properties[9],
  );

  /// See [TripEntity.startOdometer].
  static final startOdometer = obx.QueryDoubleProperty<TripEntity>(
    _entities[4].properties[10],
  );

  /// See [TripEntity.endOdometer].
  static final endOdometer = obx.QueryDoubleProperty<TripEntity>(
    _entities[4].properties[11],
  );

  /// See [TripEntity.startPositionId].
  static final startPositionId = obx.QueryIntegerProperty<TripEntity>(
    _entities[4].properties[12],
  );

  /// See [TripEntity.endPositionId].
  static final endPositionId = obx.QueryIntegerProperty<TripEntity>(
    _entities[4].properties[13],
  );

  /// See [TripEntity.spentFuel].
  static final spentFuel = obx.QueryDoubleProperty<TripEntity>(
    _entities[4].properties[14],
  );

  /// See [TripEntity.attributesJson].
  static final attributesJson = obx.QueryStringProperty<TripEntity>(
    _entities[4].properties[15],
  );
}

/// [TelemetryRecord] entity fields to define ObjectBox queries.
class TelemetryRecord_ {
  /// See [TelemetryRecord.id].
  static final id = obx.QueryIntegerProperty<TelemetryRecord>(
    _entities[5].properties[0],
  );

  /// See [TelemetryRecord.deviceId].
  static final deviceId = obx.QueryIntegerProperty<TelemetryRecord>(
    _entities[5].properties[1],
  );

  /// See [TelemetryRecord.timestampMs].
  static final timestampMs = obx.QueryIntegerProperty<TelemetryRecord>(
    _entities[5].properties[2],
  );

  /// See [TelemetryRecord.speed].
  static final speed = obx.QueryDoubleProperty<TelemetryRecord>(
    _entities[5].properties[3],
  );

  /// See [TelemetryRecord.battery].
  static final battery = obx.QueryDoubleProperty<TelemetryRecord>(
    _entities[5].properties[4],
  );

  /// See [TelemetryRecord.signal].
  static final signal = obx.QueryDoubleProperty<TelemetryRecord>(
    _entities[5].properties[5],
  );

  /// See [TelemetryRecord.engine].
  static final engine = obx.QueryStringProperty<TelemetryRecord>(
    _entities[5].properties[6],
  );

  /// See [TelemetryRecord.odometer].
  static final odometer = obx.QueryDoubleProperty<TelemetryRecord>(
    _entities[5].properties[7],
  );

  /// See [TelemetryRecord.motion].
  static final motion = obx.QueryBooleanProperty<TelemetryRecord>(
    _entities[5].properties[8],
  );
}

/// [TripSnapshot] entity fields to define ObjectBox queries.
class TripSnapshot_ {
  /// See [TripSnapshot.id].
  static final id = obx.QueryIntegerProperty<TripSnapshot>(
    _entities[6].properties[0],
  );

  /// See [TripSnapshot.monthKey].
  static final monthKey = obx.QueryStringProperty<TripSnapshot>(
    _entities[6].properties[1],
  );

  /// See [TripSnapshot.tripCount].
  static final tripCount = obx.QueryIntegerProperty<TripSnapshot>(
    _entities[6].properties[2],
  );

  /// See [TripSnapshot.totalDistanceKm].
  static final totalDistanceKm = obx.QueryDoubleProperty<TripSnapshot>(
    _entities[6].properties[3],
  );

  /// See [TripSnapshot.totalDurationHrs].
  static final totalDurationHrs = obx.QueryDoubleProperty<TripSnapshot>(
    _entities[6].properties[4],
  );

  /// See [TripSnapshot.avgSpeedKph].
  static final avgSpeedKph = obx.QueryDoubleProperty<TripSnapshot>(
    _entities[6].properties[5],
  );

  /// See [TripSnapshot.createdAt].
  static final createdAt = obx.QueryDateProperty<TripSnapshot>(
    _entities[6].properties[6],
  );
}

/// [GeofenceEventEntity] entity fields to define ObjectBox queries.
class GeofenceEventEntity_ {
  /// See [GeofenceEventEntity.id].
  static final id = obx.QueryIntegerProperty<GeofenceEventEntity>(
    _entities[7].properties[0],
  );

  /// See [GeofenceEventEntity.eventId].
  static final eventId = obx.QueryStringProperty<GeofenceEventEntity>(
    _entities[7].properties[1],
  );

  /// See [GeofenceEventEntity.geofenceId].
  static final geofenceId = obx.QueryStringProperty<GeofenceEventEntity>(
    _entities[7].properties[2],
  );

  /// See [GeofenceEventEntity.geofenceName].
  static final geofenceName = obx.QueryStringProperty<GeofenceEventEntity>(
    _entities[7].properties[3],
  );

  /// See [GeofenceEventEntity.deviceId].
  static final deviceId = obx.QueryStringProperty<GeofenceEventEntity>(
    _entities[7].properties[4],
  );

  /// See [GeofenceEventEntity.deviceName].
  static final deviceName = obx.QueryStringProperty<GeofenceEventEntity>(
    _entities[7].properties[5],
  );

  /// See [GeofenceEventEntity.eventType].
  static final eventType = obx.QueryStringProperty<GeofenceEventEntity>(
    _entities[7].properties[6],
  );

  /// See [GeofenceEventEntity.eventTimeMs].
  static final eventTimeMs = obx.QueryIntegerProperty<GeofenceEventEntity>(
    _entities[7].properties[7],
  );

  /// See [GeofenceEventEntity.latitude].
  static final latitude = obx.QueryDoubleProperty<GeofenceEventEntity>(
    _entities[7].properties[8],
  );

  /// See [GeofenceEventEntity.longitude].
  static final longitude = obx.QueryDoubleProperty<GeofenceEventEntity>(
    _entities[7].properties[9],
  );

  /// See [GeofenceEventEntity.dwellDurationMs].
  static final dwellDurationMs = obx.QueryIntegerProperty<GeofenceEventEntity>(
    _entities[7].properties[10],
  );

  /// See [GeofenceEventEntity.status].
  static final status = obx.QueryStringProperty<GeofenceEventEntity>(
    _entities[7].properties[11],
  );

  /// See [GeofenceEventEntity.syncStatus].
  static final syncStatus = obx.QueryStringProperty<GeofenceEventEntity>(
    _entities[7].properties[12],
  );

  /// See [GeofenceEventEntity.attributesJson].
  static final attributesJson = obx.QueryStringProperty<GeofenceEventEntity>(
    _entities[7].properties[13],
  );
}
