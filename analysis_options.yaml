# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:very_good_analysis/analysis_options.yaml



linter:
  # The lint rules applied to this project can be customized in the
  # section below to disable rules from the `package:flutter_lints/flutter.yaml`
  # included above or to enable additional rules. A list of all available lints
  # and their documentation is published at https://dart.dev/lints.
  #
  # Instead of disabling a lint rule for the entire project in the
  # section below, it can also be suppressed for a single line of code
  # or a specific dart file by using the `// ignore: name_of_lint` and
  # `// ignore_for_file: name_of_lint` syntax on the line or in the file
  # producing the lint.
  rules:
    # Project-specific relaxations/tweaks
    avoid_print: false # allow debug logging for now
    sort_constructors_first: false
    public_member_api_docs: false
    lines_longer_than_80_chars: false
    # Additional linter rules
    directives_ordering: true
    # Turn off cascade_invocations rule project-wide because generated code often triggers it.
    cascade_invocations: false
    prefer_constructors_over_static_methods: true

# Exclude generated files from analyzer to reduce noise from codegen artifacts
analyzer:
  errors:
    todo: ignore
  exclude:
    - lib/**.g.dart
    - lib/**.freezed.dart
    # Exclude accidental/malformed files which may appear during development
    - lib/core/data/*onMarkerTap*.dart


# Additional information about this file can be found at
# https://dart.dev/guides/language/analysis-options
